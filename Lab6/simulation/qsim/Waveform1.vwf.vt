// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2024 22:43:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          data_memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module data_memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] WD;
reg WE;
reg clk;
reg rst;
// wires                                               
wire [31:0] RD;
wire [31:0] prode;

// assign statements (if any)                          
data_memory i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.RD(RD),
	.WD(WD),
	.WE(WE),
	.clk(clk),
	.prode(prode),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #440000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #130000 1'b1;
end 
// WD[ 31 ]
initial
begin
	WD[31] = 1'b0;
end 
// WD[ 30 ]
initial
begin
	WD[30] = 1'b0;
end 
// WD[ 29 ]
initial
begin
	WD[29] = 1'b0;
end 
// WD[ 28 ]
initial
begin
	WD[28] = 1'b0;
end 
// WD[ 27 ]
initial
begin
	WD[27] = 1'b0;
end 
// WD[ 26 ]
initial
begin
	WD[26] = 1'b0;
end 
// WD[ 25 ]
initial
begin
	WD[25] = 1'b0;
end 
// WD[ 24 ]
initial
begin
	WD[24] = 1'b0;
end 
// WD[ 23 ]
initial
begin
	WD[23] = 1'b0;
end 
// WD[ 22 ]
initial
begin
	WD[22] = 1'b0;
end 
// WD[ 21 ]
initial
begin
	WD[21] = 1'b0;
end 
// WD[ 20 ]
initial
begin
	WD[20] = 1'b0;
end 
// WD[ 19 ]
initial
begin
	WD[19] = 1'b0;
end 
// WD[ 18 ]
initial
begin
	WD[18] = 1'b0;
end 
// WD[ 17 ]
initial
begin
	WD[17] = 1'b0;
end 
// WD[ 16 ]
initial
begin
	WD[16] = 1'b0;
end 
// WD[ 15 ]
initial
begin
	WD[15] = 1'b0;
end 
// WD[ 14 ]
initial
begin
	WD[14] = 1'b0;
end 
// WD[ 13 ]
initial
begin
	WD[13] = 1'b0;
end 
// WD[ 12 ]
initial
begin
	WD[12] = 1'b0;
end 
// WD[ 11 ]
initial
begin
	WD[11] = 1'b0;
end 
// WD[ 10 ]
initial
begin
	WD[10] = 1'b0;
end 
// WD[ 9 ]
initial
begin
	WD[9] = 1'b0;
end 
// WD[ 8 ]
initial
begin
	WD[8] = 1'b0;
end 
// WD[ 7 ]
initial
begin
	WD[7] = 1'b0;
end 
// WD[ 6 ]
initial
begin
	WD[6] = 1'b0;
end 
// WD[ 5 ]
initial
begin
	WD[5] = 1'b0;
	WD[5] = #100000 1'b1;
	WD[5] = #800000 1'b0;
end 
// WD[ 4 ]
initial
begin
	WD[4] = 1'b0;
end 
// WD[ 3 ]
initial
begin
	WD[3] = 1'b0;
end 
// WD[ 2 ]
initial
begin
	WD[2] = 1'b0;
end 
// WD[ 1 ]
initial
begin
	WD[1] = 1'b0;
end 
// WD[ 0 ]
initial
begin
	WD[0] = 1'b0;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #160000 1'b1;
	WE = #280000 1'b0;
	WE = #480000 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #60000 1'b1;
end 
endmodule

