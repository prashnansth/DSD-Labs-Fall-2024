// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2024 21:26:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] ALUControl;
reg [31:0] SrcA;
reg [31:0] SrcB;
// wires                                               
wire [31:0] ALUResult;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.ALUControl(ALUControl),
	.ALUResult(ALUResult),
	.SrcA(SrcA),
	.SrcB(SrcB)
);
initial 
begin 
#1000000 $finish;
end 
// ALUControl[ 2 ]
initial
begin
	ALUControl[2] = 1'b0;
	ALUControl[2] = #230000 1'b1;
	ALUControl[2] = #270000 1'b0;
end 
// ALUControl[ 1 ]
initial
begin
	ALUControl[1] = 1'b1;
	ALUControl[1] = #500000 1'b0;
end 
// ALUControl[ 0 ]
initial
begin
	ALUControl[0] = 1'b0;
end 
// SrcA[ 31 ]
initial
begin
	SrcA[31] = 1'b0;
end 
// SrcA[ 30 ]
initial
begin
	SrcA[30] = 1'b0;
end 
// SrcA[ 29 ]
initial
begin
	SrcA[29] = 1'b0;
end 
// SrcA[ 28 ]
initial
begin
	SrcA[28] = 1'b0;
end 
// SrcA[ 27 ]
initial
begin
	SrcA[27] = 1'b0;
end 
// SrcA[ 26 ]
initial
begin
	SrcA[26] = 1'b0;
end 
// SrcA[ 25 ]
initial
begin
	SrcA[25] = 1'b0;
end 
// SrcA[ 24 ]
initial
begin
	SrcA[24] = 1'b0;
end 
// SrcA[ 23 ]
initial
begin
	SrcA[23] = 1'b0;
end 
// SrcA[ 22 ]
initial
begin
	SrcA[22] = 1'b0;
end 
// SrcA[ 21 ]
initial
begin
	SrcA[21] = 1'b0;
end 
// SrcA[ 20 ]
initial
begin
	SrcA[20] = 1'b0;
end 
// SrcA[ 19 ]
initial
begin
	SrcA[19] = 1'b0;
end 
// SrcA[ 18 ]
initial
begin
	SrcA[18] = 1'b0;
end 
// SrcA[ 17 ]
initial
begin
	SrcA[17] = 1'b0;
end 
// SrcA[ 16 ]
initial
begin
	SrcA[16] = 1'b0;
end 
// SrcA[ 15 ]
initial
begin
	SrcA[15] = 1'b0;
end 
// SrcA[ 14 ]
initial
begin
	SrcA[14] = 1'b0;
end 
// SrcA[ 13 ]
initial
begin
	SrcA[13] = 1'b0;
end 
// SrcA[ 12 ]
initial
begin
	SrcA[12] = 1'b0;
end 
// SrcA[ 11 ]
initial
begin
	SrcA[11] = 1'b0;
end 
// SrcA[ 10 ]
initial
begin
	SrcA[10] = 1'b0;
end 
// SrcA[ 9 ]
initial
begin
	SrcA[9] = 1'b0;
end 
// SrcA[ 8 ]
initial
begin
	SrcA[8] = 1'b0;
end 
// SrcA[ 7 ]
initial
begin
	SrcA[7] = 1'b0;
end 
// SrcA[ 6 ]
initial
begin
	SrcA[6] = 1'b0;
end 
// SrcA[ 5 ]
initial
begin
	SrcA[5] = 1'b0;
end 
// SrcA[ 4 ]
initial
begin
	SrcA[4] = 1'b0;
end 
// SrcA[ 3 ]
initial
begin
	SrcA[3] = 1'b1;
end 
// SrcA[ 2 ]
initial
begin
	SrcA[2] = 1'b0;
end 
// SrcA[ 1 ]
initial
begin
	SrcA[1] = 1'b1;
end 
// SrcA[ 0 ]
initial
begin
	SrcA[0] = 1'b0;
end 
// SrcB[ 31 ]
initial
begin
	SrcB[31] = 1'b0;
end 
// SrcB[ 30 ]
initial
begin
	SrcB[30] = 1'b0;
end 
// SrcB[ 29 ]
initial
begin
	SrcB[29] = 1'b0;
end 
// SrcB[ 28 ]
initial
begin
	SrcB[28] = 1'b0;
end 
// SrcB[ 27 ]
initial
begin
	SrcB[27] = 1'b0;
end 
// SrcB[ 26 ]
initial
begin
	SrcB[26] = 1'b0;
end 
// SrcB[ 25 ]
initial
begin
	SrcB[25] = 1'b0;
end 
// SrcB[ 24 ]
initial
begin
	SrcB[24] = 1'b0;
end 
// SrcB[ 23 ]
initial
begin
	SrcB[23] = 1'b0;
end 
// SrcB[ 22 ]
initial
begin
	SrcB[22] = 1'b0;
end 
// SrcB[ 21 ]
initial
begin
	SrcB[21] = 1'b0;
end 
// SrcB[ 20 ]
initial
begin
	SrcB[20] = 1'b0;
end 
// SrcB[ 19 ]
initial
begin
	SrcB[19] = 1'b0;
end 
// SrcB[ 18 ]
initial
begin
	SrcB[18] = 1'b0;
end 
// SrcB[ 17 ]
initial
begin
	SrcB[17] = 1'b0;
end 
// SrcB[ 16 ]
initial
begin
	SrcB[16] = 1'b0;
end 
// SrcB[ 15 ]
initial
begin
	SrcB[15] = 1'b0;
end 
// SrcB[ 14 ]
initial
begin
	SrcB[14] = 1'b0;
end 
// SrcB[ 13 ]
initial
begin
	SrcB[13] = 1'b0;
end 
// SrcB[ 12 ]
initial
begin
	SrcB[12] = 1'b0;
end 
// SrcB[ 11 ]
initial
begin
	SrcB[11] = 1'b0;
end 
// SrcB[ 10 ]
initial
begin
	SrcB[10] = 1'b0;
end 
// SrcB[ 9 ]
initial
begin
	SrcB[9] = 1'b0;
end 
// SrcB[ 8 ]
initial
begin
	SrcB[8] = 1'b0;
end 
// SrcB[ 7 ]
initial
begin
	SrcB[7] = 1'b0;
end 
// SrcB[ 6 ]
initial
begin
	SrcB[6] = 1'b0;
end 
// SrcB[ 5 ]
initial
begin
	SrcB[5] = 1'b0;
end 
// SrcB[ 4 ]
initial
begin
	SrcB[4] = 1'b0;
end 
// SrcB[ 3 ]
initial
begin
	SrcB[3] = 1'b0;
end 
// SrcB[ 2 ]
initial
begin
	SrcB[2] = 1'b1;
end 
// SrcB[ 1 ]
initial
begin
	SrcB[1] = 1'b0;
end 
// SrcB[ 0 ]
initial
begin
	SrcB[0] = 1'b1;
end 
endmodule

